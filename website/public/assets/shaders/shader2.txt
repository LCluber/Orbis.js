{

"vertex":"
		#ifdef GL_ES
			precision highp float;
		#endif

		attribute vec3 aVertexPosition;
		attribute vec3 aVertexNormal;

		#ifdef UVS
			attribute vec2 aVertexTexCoord;
			varying   vec2 vVertexTexCoord;
		#endif

		uniform mat4 uMMatrix;
		uniform mat4 uVMatrix;
		uniform mat4 uPMatrix;

		varying vec3 vVertexPosition;
		varying vec3 vVertexNormal;


		void main(){
			mat4 MM = uMMatrix;
			mat4 VM = uVMatrix * MM;
			gl_Position = uPMatrix * VM * vec4(aVertexPosition, 1.0);

			vVertexPosition = vec3(VM * vec4(aVertexPosition, 1.0));
			vVertexNormal = vec3(VM * vec4(aVertexNormal, 0.0));

			#ifdef UVS
				vVertexTexCoord = aVertexTexCoord;
			#endif
		}",
"fragment":"

	#define PI 3.1415926535897932384626433832795
	#define TWOPI 6.283185307179586
	#define HALFPI 1.57079632679

	#ifdef GL_ES
		precision highp float;
	#endif

	varying vec3 vVertexPosition;
	varying vec3 vVertexNormal;

	#ifdef UVS
		varying vec2 vVertexTexCoord;

		#ifdef AMBIENTTEX
			uniform sampler2D uAmbientSampler;
		#endif

		#ifdef DIFFUSETEX
			uniform sampler2D uDiffuseSampler;
		#endif

		#ifdef EMISSIVETEX
			uniform sampler2D uEmissiveSampler;
		#endif

		#ifdef SPECULARTEX
			uniform sampler2D uSpecularSampler;
		#endif
	#endif

	uniform sampler2D uColorRampSampler;

	uniform mat4 uVMatrix;

	uniform vec3 uMaterialAmbient;
	uniform vec3 uMaterialDiffuse;
	uniform vec3 uMaterialEmissive;
	uniform vec3 uMaterialSpecular;
	uniform float uMaterialSpecularPower;

	const int NbLights = 1;

	uniform int uLightType[NbLights];
	uniform vec3 uLightPosition[NbLights];
	uniform vec3 uLightRotation[NbLights];
	uniform vec3 uLightAmbient[NbLights];
	uniform vec3 uLightDiffuse[NbLights];
	uniform vec3 uLightSpecular[NbLights];
	uniform vec3 uLightAttenuation[NbLights];
	uniform float uLightAngle[NbLights];
	uniform float uLightExponent[NbLights];
	uniform float uLightIntensity[NbLights];

	uniform float uTime;

	void main(){
		#ifdef AMBIENTTEX
			vec4 ambientColor = texture2D(uAmbientSampler, vVertexTexCoord);
		#else
			#ifdef DIFFUSETEX
				vec4 ambientColor = texture2D(uDiffuseSampler, vVertexTexCoord);
			#else
				vec4 ambientColor = vec4(uMaterialAmbient, 1.0);
			#endif
		#endif

		#ifdef DIFFUSETEX
			vec4 diffuseColor = texture2D(uDiffuseSampler, vVertexTexCoord);
		#else
			vec4 diffuseColor = vec4(uMaterialDiffuse, 1.0);
		#endif

		#ifdef EMISSIVETEX
			vec4 emissiveColor = texture2D(uEmissiveSampler, vVertexTexCoord);
		#else
			vec4 emissiveColor = vec4(.0);
			/*vec4 emissiveColor = vec4(uMaterialEmissive, 1.0);*/
		#endif

		#ifdef SPECULARTEX
			vec4 specularColor = texture2D(uSpecularSampler, vVertexTexCoord);
		#else
			vec4 specularColor = vec4(uMaterialSpecular, 1.0);
		#endif

		vec3 eyeDirection = normalize(-vVertexPosition);
		vec3 fragmentNormal = normalize(vVertexNormal);
		vec3 fragmentToLight;
		vec3 color = vec3(.0);


		for (int i = 0; i < NbLights; i++) {

			float attenuation = 1.;
			float cutoff = 1.;
			float specularContribution = 0.;
			float diffuseContribution = 0.;
			vec3 lightPosition = vec3 (uVMatrix * vec4 (uLightPosition[i], 1.0));
			bool contribute = true;

			/*point and spot*/
			if(uLightType[i] > 0){
				fragmentToLight = lightPosition - vVertexPosition;
				float distance = length(fragmentToLight);
				fragmentToLight = normalize(fragmentToLight);

				attenuation /= uLightAttenuation[i].x
						+ uLightAttenuation[i].y * distance
						+ uLightAttenuation[i].z * distance * distance
						+ 0.00001;

				/*spot light*/
				if(uLightType[i] == 2){
					vec3 lightDirection = vec3 (uVMatrix * vec4 (normalize(uLightRotation[i]), 0.)
						);
					float cosAngle = max(0., dot(lightDirection, -fragmentToLight)
							);
					if(cosAngle >= uLightAngle[i]){
						cosAngle = max(0., pow(	cosAngle, uLightExponent[i]));
						cutoff -= (1. - cosAngle)/(1. - uLightExponent[i]);
					}else{
						contribute = false;
					}
				}
			/*Directional light*/
			}else{
				fragmentToLight = normalize(lightPosition);
			}

			if (contribute) {
				/*diffuse component*/
				diffuseContribution = max(0., dot( fragmentNormal, fragmentToLight )) * cutoff;

				/*don't compute specular if diffuse or specular power is null*/
				if(diffuseContribution > 0. && uMaterialSpecularPower > 0.){
					specularContribution = pow( max( 0., dot( reflect( -fragmentToLight, fragmentNormal), eyeDirection )), uMaterialSpecularPower ) * cutoff;
				}
			}

      vec4 dc = diffuseColor;

			color 	+=		dc.rgb
						*	uMaterialAmbient
						*	uLightAmbient[i]

				+		dc.rgb
					*	uMaterialDiffuse
					*	uLightDiffuse[i]
					*	diffuseContribution
					*	attenuation

				+	specularColor.rgb
					*	uMaterialSpecular
					*	uLightSpecular[i]
					*	specularContribution
					*	attenuation
				;
		}
		gl_FragColor = vec4( max( color, emissiveColor.rgb * mix( uMaterialEmissive, uMaterialEmissive2, uPolarityAnimation )), 1);

		}"
}
